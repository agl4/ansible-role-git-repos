---
- name: clone repos
  git:
    repo: "{{ item.url }}"
    dest: "{{ item.path }}"
    accept_hostkey: true
    version: "{{ item.version | default('master') }}"
    update: "no"
    track_submodules: "{{ item.track_submodules | default(true) }}"
  with_items: "{{ git_repos }}"

- name: fetch repos
  command: >-
    git fetch {{ item.fetch_args | default(git_fetch_args) }}
  args:
    chdir: "{{ item.path }}"
  with_items: "{{ git_repos | selectattr('fetch_enabled') }}"
  changed_when: false
  tags:
    - skip_ansible_lint

- name: git pull
  command: >-
    git pull
  args:
    chdir: "{{ item.path }}"
  register: gitpull
  changed_when: "'Already up to date' not in gitpull.stdout"
  with_items: "{{ git_repos | selectattr('pull_enabled') }}"
  tags:
    - skip_ansible_lint

- name: git push
  command: >-
    git push {{ item.push_args | default(git_push_args) }}
  args:
    chdir: "{{ item.path }}"
  register: gitpush
  changed_when: "'Everything up-to-date' not in gitpush.stderr"
  with_items: "{{ git_repos | selectattr('push_enabled') }}"
  tags:
    - skip_ansible_lint

- name: git push tags
  command: >-
    git push --tags
  args:
    chdir: "{{ item.path }}"
  register: gitpush_tags
  changed_when: "'Everything up-to-date' not in gitpush_tags.stderr"
  with_items: "{{ git_repos | selectattr('push_tags_enabled') }}"
  tags:
    - skip_ansible_lint

- name: repo git config
  git_config:
    scope: local
    repo: "{{ item.0.path }}"
    state: "{{ item.1.state | default('present') }}"
    name: "{{ item.1.name }}"
    value: "{{ item.1.value }}"
  loop: "{{ lookup('subelements', git_repos, 'config', { 'skip_missing': true }, wantlist=true) }}"
